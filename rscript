          #############################################
          ############### Uploading CSV ###############
          #############################################

yelich_19 <- read.csv(file.choose())

#Variables needed
  #hc_x: x-coordinate of ball in play (factor)
  #hc_y: y-coordinate of ball in play (factor)
  #bb_type: type of hit ball (factor)

  #We want to replace "null" with NAs in hc_x and hx_y
  #We want to make hc_x and hc_y a numeric rather than a factor
  #We can leave bb_type as a factor
  

          #########################################
          ################ Cleaning ###############
          #########################################
          
          
yelich_19$hc_x <- as.numeric(as.character(yelich_19$hc_x))
yelich_19$hc_y <- as.numeric(as.character(yelich_19$hc_y))
      #This will yield a warning that NAs were introduced by coercion. This is what we want, 
      #it replaced the "nulls" which were being viewed as a factor, to a recognized NA

      #Note: If you want to use other variables in this dataset, there are other "nulls" 
      #and numeric variables they upload as factors
        
        
        
          ##########################################################    
          ################ Creating the scatter plot ###############
          ##########################################################
          
          
          
library(ggplot2)

#Initial scatter pot
ggplot(yelich_19, aes(x=hc_x, y=hc_y)) + geom_point()
      #You can see that clearly the image is upside down. We can fix this by multiplying all of
      #the y-values by -1

#scatter plot v2
ggplot(yelich_19, aes(x=hc_x, y=-1*hc_y)) + geom_point()

#Adding meaningful color (by bb_type)
ggplot(yelich_19, aes(x=hc_x, y=-1*hc_y)) + geom_point(aes(color=bb_type))
    #Notice, there is a "null" showing up. We can investigate that
    #Additionally, if you want to color it by a different variable, make sure to duoble
    #check if it is a factor, you'll need to make it numeric
    
    
          ###################################################   
          ################ Adding the diamond ###############
          ###################################################
          

#Packages
install.packages("png") #Reading a png
library(png)
install.packages("grid") #Adding it to a ggplot
library(grid)

#Reading in image
setwd("~/Documents/Zach/R/Baseball/TwinsPics") 
      #Set the working directory to wherever you 
      #saved the diamond image, whch is located
      #in the repository
      
img <- readPNG("diamond.png")


#Creating an object that can be added to a ggplot
diamond <- list(annotation_custom(rasterGrob(img, 
                                             width=unit(1,"npc"),
                                             height=unit(1,"npc")),-5, 262, -240, 30), 
                coord_cartesian(xlim=c(0, 250), ylim=c(-215, 0)), 
                theme_classic())
                

#Adding it to the scatter plot
ggplot(yelich_19, aes(x=hc_x, y=-1*hc_y)) + 
  diamond + 
  geom_point(aes(color=bb_type))
  


          ###########################################################    
          ################ Cleaning up the aesthetics ###############
          ###########################################################    

ggplot(subset(yelich_19, bb_type %in% c("fly_ball", "ground_ball", "line_drive", "popup")), aes(x=hc_x, y=-1*hc_y)) + 
  diamond + 
  geom_point(aes(color=bb_type), alpha=0.5, size=3) +
  theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
  scale_color_manual(name = "Type", values = c("#F8766D", '#00BFC4', "yellow", "blue", "green"), 
                     labels = c("Fly Ball", "Ground Ball", "Line Drive", "Popup", "NA"), guide='legend')
                    
          #Need to view the zoomed image and change the window size to make the 
          #baseball diamond not look warped
                     
                     
          ####################################################           
          ############### Making it a function ###############    
          ####################################################    
          
 spray <- function(df, name, year){
  fieldpic <- readPNG("diamond.png")
  p1 <- ggplot(subset(df, player_name == name & bb_type %in% c("fly_ball", "ground_ball", "line_drive", "popup") & game_year==year), aes(x=hc_x, y=-1*hc_y)) + 
    diamond + 
    geom_point(aes(color=bb_type), alpha=0.5, size=3) + 
    theme(axis.title.x=element_blank(), axis.title.y=element_blank()) + 
    scale_color_manual(name = "Type", values = c("#F8766D", '#00BFC4', "yellow", "blue", "green"), 
                       labels = c("Fly Ball", "Ground Ball", "Line Drive", "Popup", "NA"), guide='legend')
  
  return(p1)
}

#You can download  a player's csv from multiple years, as well as downloading
#multiple players and row-binding them together into one big file. Then you can 
#Use the function above to choose which player and year you want to look at

#I downloaded Christian Yelich and Nelson Cruz from year 2018, 2019, and 2020. 

yelich <- read.csv(file.choose())
cruz <- read.csv(file.choose())

#Recall, we need to change the coordinates to numeric
yelich$hc_x <- as.numeric(as.character(yelich$hc_x))
yelich$hc_y <- as.numeric(as.character(yelich$hc_y))
cruz$hc_x <- as.numeric(as.character(cruz$hc_x))
cruz$hc_y <- as.numeric(as.character(cruz$hc_y))

#Row bind into one data frame
players <- rbind(yelich, cruz)

#Use the function
spray(players, "Christian Yelich", 2018)
spray(players, "Nelson Cruz", 2018)

